#!/bin/sh

# Universal Wayland Desktop Session Manager
# Runs selected WM with plugin-extendable tweaks
# Manages systemd environment and targets along the way
# Inspired by and uses some techniques from:
#  https://github.com/xdbob/sway-services
#  https://github.com/alebastr/sway-systemd
#  https://github.com/swaywm/sway
#  https://people.debian.org/~mpitt/systemd.conf-2016-graphical-session.pdf

SUPPORTED_WMS=''
SUPPORTED_MODES='check|unitgen|prepare-env|sd-start|sd-stop|cleanup-env|unitrm'
PLUGIN_PREFIX_PATHS="/lib:/usr/lib:/usr/local/lib:${HOME}/.local/lib"
PLUGIN_DIR_NAME=wayland-session-plugins
PLUGIN_NAME_PATTERN='*.sh.in'

#### this is for testing
WS_EXEC="$(realpath -s "$0")"
# since script can be sourced, $0 is not reliable
WS_SELF=wayland-session
# wayland-wm-env@.service needs full path in case wayland-session is in ${USER}/.local/bin
# which most likely is not in PATH of systemd user manager when wayland-wm-env@.service starts
WS_SELF_FULL=$(which "$WS_SELF")
####

START_STOP_RETRIES=10

# variables that will always be exported to systemd user manager during startup
ALWAYS_EXPORT_VARS="XDG_SESSION_ID
XDG_VTNR
XDG_CURRENT_DESKTOP
XDG_SESSION_DESKTOP
XDG_MENU_PREFIX
PATH"

# variables that will never be exported to systemd user manager during startup
NEVER_EXPORT_VARS="PWD
LS_COLORS
INVOCATION_ID
SHLVL
SHELL"

# variables that will never be cleaned up from systemd user manager during shutdown
NEVER_CLEANUP_VARS="SSH_AGENT_LAUNCHER
SSH_AUTH_SOCK
SSH_AGENT_PID"

# variables that will always be cleaned up from systemd user manager during shutdown
ALWAYS_CLEANUP_VARS="DISPLAY
WAYLAND_DISPLAY
XDG_SESSION_ID
XDG_VTNR
XDG_CURRENT_DESKTOP
XDG_SESSION_DESKTOP
XDG_MENU_PREFIX
PATH
XCURSOR_THEME
XCURSOR_SIZE
LANG"

show_help() {
	cat <<- EOF
		
		Generic wayland session manager with systemd integration
		Usage:
		  ${WS_SELF} ${SUPPORTED_WMS:-supported_wm} ${SUPPORTED_MODES}
		
		${WS_SELF} manages session for selected wayland WM.
		Supported modes:
		    check:     checks supported arguments
		
		    sd-start:     does all unit preparations and starts WM via a service
		                  with --wait and a set of traps to bind to its life
		    sd-stop:      stops wm
		
		    If more control needed: more grained modes available:
		    unitgen:      generates systemd unit files in runtime hierarchy
		    prepare-env:  prepares environment for WM in systemd user manager
		                  (for use in ExecStart of wayland-wm-env@.service)
		    cleanup-env:  cleans up environment from systemd user manager
		                  (for use in ExecStop of wayland-wm-env@.service)
		    unitrm:       removes systemd unit files from runtime hierarchy
		
		    WM can be started this way:
		        ${WS_SELF} \${WM} unitgen
		        exec systemctl --user --wait start wayland-wm@\${WM}.service
		
		    Or binding it both ways to login session:
		        ${WS_SELF} \${WM} unitgen
			trap "systemctl --user stop wayland-wm@\${WM}.service" EXIT INT TERM
		        systemctl --user --wait start wayland-wm@\${WM}.service ; exit
		
		${WS_SELF} also loads environment from "wayland-session-env" and "\${WM}/env" files in
		\${XDG_CONFIG_DIRS}:\${XDG_CONFIG_HOME} dirs (in order of increasing importance)
		
		If your WM is systemd-aware and supports launching apps explicitly scoped in app.slice,
		or if you prefixed all app commands launched by WM with:
		
		    systemd-run --user --scope --slice=app.slice
		
		then you can put WM in session.slice (as recommended by man systemd.special) by setting
		
		    UWSM_USE_SESSION_SLICE=true
		
		This var affects unitgen phase, Slice= parameter of services.
		
		See code comments for documentation on plugins.
	EOF
}

# functions for use in plugins
add_supported_wm() {
	# takes simple executable name
	if echo "$1" | grep -qE "^[a-zA-Z0-9_-]+$" && [ "$(echo "$1" | wc -l)" = "1" ]
	then
		if echo "$1" | grep -qe "^(${SUPPORTED_WMS})\$"
		then
			echo "WM $1 is already supported"
		else
			SUPPORTED_WMS="${SUPPORTED_WMS}${SUPPORTED_WMS:+|}${1}"
			echo "Added supported WM $1"
		fi
		return 0
	else
		echo "Attempted to add invalid WM name" >&2
		echo "$1" >&2
		return 1
	fi
}

# load plugins
# plugins should contain only add_supported_wm call
# and specifically named functions
# function name suffix is expected to be WM name with
# all dashes replaced by underscores and underscores singled
# $(echo "$WM" | tr '-' '_' | tr -s '_')
# example:
#
#  #!/bin/false
#
#  add_supported_wm my-cool-wm
#
#  # function to make arbitrary actions before loading ${WM}/env
#  quirks_my_cool_wm() {
#    # here additional vars can be added set for session manager
#    # like
#    IMPORT_BACK_VARS="${IMPORT_BACK_VARS} MY_WM_SOCKET"
#    ALWAYS_EXPORT_VARS="${ALWAYS_EXPORT_VARS} SOME OTHER VARS"
#    ALWAYS_CLEANUP_VARS"${ALWAYS_CLEANUP_VARS} SOME OTHER VARS"
#    # or export more vars for session
#    export I_WANT_THIS_IN_SESSION=yes
#    # or prepare a config (see wayfire plugin)
#    # or set a var to modify what ${WM}/env in the next stage will do
#    ...
#  }
#  load_wm_env_my_cool_wm() {
#    # wm-specific loading of env (or a stub)
#  }
#  generate_units_my_cool_wm() {
#    # place some units or fragments specifically for my-cool-wm
#    # reloading is handled by main script
#  }
#  remove_units_my_cool_wm() {
#    # remove the same units
#    # reloading is handled by main script
#  }
#  # Function to override WM execution in shell-start|shell-intstart mode
#  # Always define WM as arguments to wm_wrapper
#  # if needed to modify execution in full systemd mode, add dropin in generate_units_my_cool_wm()
#  run_wm_my_cool_wm() {
#    wm_wrapper my-cool-wm --with any args
#  }
#  # function to terminate compositor
#  exit_my_cool_wm() {
#    # requires MY_WM_SOCKET in IMPORT_BACK_VARS
#    my-cool-wm-communicate exit
#  }

OIFS="$IFS"
IFS=":"
for PLUGIN_PREFIX_PATH in $PLUGIN_PREFIX_PATHS
do
	if [ -n "$PLUGIN_PREFIX_PATH" -a -n "$PLUGIN_DIR_NAME" -a -n "$PLUGIN_NAME_PATTERN" -a -d "${PLUGIN_PREFIX_PATH}/${PLUGIN_DIR_NAME}" ]
	then
		IFS="
"
		for PFILE in $(
			find -L "${PLUGIN_PREFIX_PATH}/${PLUGIN_DIR_NAME}/"\
			  -mindepth 1 -maxdepth 1 \
			  -type f -name "$PLUGIN_NAME_PATTERN"
		)
		do
			echo "Loading plugin: $PFILE"
			. "$PFILE"
		done
	fi
done
IFS="$OIFS"

if echo "$*" | grep -qE '(^| )(--help|-h)( |$)'
then
	show_help
	return 0 2>/dev/null || exit 0
fi

WM="${1:?Requires a compositor as first argument: $SUPPORTED_WMS}"
# replace dashes with underscores for function names
WM_FNAME=$(echo "$WM" | tr '-' '_' | tr -s '_')
MODE="${2:?Requires a mode of action as second argument: $SUPPORTED_MODES}"

CHECKOUT=true

if ! echo "$MODE" | grep -qE "^(${SUPPORTED_MODES})\$"
then
	echo "Mode $MODE not supported, choose $SUPPORTED_MODES" >&2
	CHECKOUT=false
fi

if ! echo "$WM" | grep -qE "^[a-zA-Z0-9_-]+$"
then
	echo "Got malformed compositor name: $WM" >&2
	CHECKOUT=false
fi

if ! [ -x "$(which "$WM")" ]
then
	echo "$WM is not an executable binary" >&2
	CHECKOUT=false
fi

if ! echo "$WM" | grep -qE "^(${SUPPORTED_WMS})$"
then
	echo "Compositor $WM not supported, choose $SUPPORTED_WMS" >&2
	CHECKOUT=false
fi

if [ -z "$XDG_RUNTIME_DIR" ]
then
	echo "\$XDG_RUNTIME_DIR is not set, something is wrong with your environment" >&2
	CHECKOUT=false
fi

# exit/return with error on failed checks
if [ "$CHECKOUT" = "false" ]
then
	return 1 2>/dev/null || exit 1

elif [ "$MODE" = "check" ]
then
	# exit successfully after supported compositors check
	echo "Checked for compositor ${WM}"
	return 0 2>/dev/null || exit 0
fi

# functions for operating on lists of variable names
filter_varnames(){
	# leave only vars with valid names, some shells or tools can inject illegal chars, i.e. env-modules
	local __VAR__
	for __VAR__ in $(cat)
	do
		if echo "${__VAR__}" | grep -qE '^[a-zA-Z_][a-zA-Z0-9_]*$'
		then
			echo ${__VAR__}
		else
			echo "Encountered illegal var name ${__VAR__}, check your shell environment" >&2
		fi
	done
}

normalize_varnames_space() {
	# pipe var names to get sorted, uniqued, normalized space-separated output
	tr ' \t\n' '\n\n\n' | tr -s '\n' | sort -u | tr '\n' ' ' | sed 's/^ \+\| \+$//g'
}

normalize_varnames_newline() {
	# pipe var names to get sorted, uniqued, normalized newline-separated output
	tr ' \t\n' '\n\n\n' | tr -s '\n' | sort -u
}

varnames_subtract() {
	# pipe in list 1, get list 2 on args, output diff newline-separated output (comm)
	local RND=$(grep -ao '[[:xdigit:]]' /dev/urandom 2>/dev/null | head -n 10 | tr -d '\n')
	normalize_varnames_newline > "${XDG_RUNTIME_DIR}/${WM}_list_1_${RND}"
	echo $* | normalize_varnames_newline > "${XDG_RUNTIME_DIR}/${WM}_list_2_${RND}"
	comm -23 "${XDG_RUNTIME_DIR}/${WM}_list_1_${RND}" "${XDG_RUNTIME_DIR}/${WM}_list_2_${RND}"
	rm -f "${XDG_RUNTIME_DIR}/${WM}_list_1_${RND}" "${XDG_RUNTIME_DIR}/${WM}_list_2_${RND}"
}

varnames_intersect() {
	# pipe in list 1, get list 2 on args, output intersection newline-separated output (comm)
	local RND=$(grep -ao '[[:xdigit:]]' /dev/urandom 2>/dev/null | head -n 10 | tr -d '\n')
	normalize_varnames_newline > "${XDG_RUNTIME_DIR}/${WM}_list_1_${RND}"
	echo $* | normalize_varnames_newline > "${XDG_RUNTIME_DIR}/${WM}_list_2_${RND}"
	comm -12 "${XDG_RUNTIME_DIR}/${WM}_list_1_${RND}" "${XDG_RUNTIME_DIR}/${WM}_list_2_${RND}"
	rm -f "${XDG_RUNTIME_DIR}/${WM}_list_1_${RND}" "${XDG_RUNTIME_DIR}/${WM}_list_2_${RND}"
}

varnames_union() {
	# pipe in list 1, get list 2 on args, output merged newline-separated output
	{
		normalize_varnames_newline
		echo $* | normalize_varnames_newline
	} | sort -u
}

update_unit() {
	# takes content on stdin, stages it, copies to desitnation $1 if differs
	local RC=0
	cat > "${XDG_RUNTIME_DIR}/${WM}_staged_content"
	if [ ! -f "$1" ] || [ "$(cat "${XDG_RUNTIME_DIR}/${WM}_staged_content" | md5sum)" != "$(cat "$1" | md5sum)" ]
	then
		cp -av "${XDG_RUNTIME_DIR}/${WM}_staged_content" "$1"
		RC=$?
		rm "${XDG_RUNTIME_DIR}/${WM}_staged_content"
		UNITS_UPDATED=true
	fi
	return $RC
}

generate_units() {
	# places customized targets bound to systemd special graphical targets
	# in runtime systemd hierarchy
	if [ "${UWSM_USE_SESSION_SLICE:-false}" = "true" ]
	then
		WAYLAND_WM_SLICE=session.slice
	else
		WAYLAND_WM_SLICE=app.slice
	fi
	UNITS_UPDATED=false
	mkdir -vp "${XDG_RUNTIME_DIR}/systemd/user/"
	update_unit "${XDG_RUNTIME_DIR}/systemd/user/wayland-session-pre@.target" <<- EOF
		# injected by ${WS_SELF}, do not edit
		[Unit]
		Description=Preparation for session of %I Wayland Window Manager
		Documentation=man:systemd.special(7)
		Requires=basic.target
		StopWhenUnneeded=yes
		BindsTo=graphical-session-pre.target
		Before=graphical-session-pre.target
	EOF
	update_unit "${XDG_RUNTIME_DIR}/systemd/user/wayland-session@.target" <<- EOF
		# injected by ${WS_SELF}, do not edit
		[Unit]
		Description=Session of %I Wayland Window Manager
		Documentation=man:systemd.special(7)
		Requires=wayland-session-pre@%i.target
		After=wayland-session-pre@%i.target
		StopWhenUnneeded=yes
		BindsTo=graphical-session.target
		Before=graphical-session.target
	EOF
	update_unit "${XDG_RUNTIME_DIR}/systemd/user/wayland-session-xdg-autostart@.target" <<- EOF
		# injected by ${WS_SELF}, do not edit
		[Unit]
		Description=XDG Autostart for session of %I Wayland Window Manager
		Documentation=man:systemd.special(7)
		Requires=wayland-session@%i.target
		After=wayland-session@%i.target
		StopWhenUnneeded=yes
		BindsTo=xdg-desktop-autostart.target
		Before=xdg-desktop-autostart.target
	EOF
	update_unit "${XDG_RUNTIME_DIR}/systemd/user/wayland-wm-env@.service" <<- EOF
		# injected by ${WS_SELF}, do not edit
		[Unit]
		Description=Environment preloader for %I Wayland Window Manager
		Documentation=man:systemd.service(7)
		BindsTo=wayland-session-pre@%i.target
		Before=wayland-session-pre@%i.target
		StopWhenUnneeded=yes
		[Service]
		Type=oneshot
		RemainAfterExit=yes
		ExecStart=${WS_SELF_FULL} "%I" prepare-env
		ExecStop=${WS_SELF_FULL} "%I" cleanup-env
		Restart=no
		Slice=${WAYLAND_WM_SLICE}
	EOF
	update_unit "${XDG_RUNTIME_DIR}/systemd/user/wayland-wm@.service" <<- EOF
		# injected by ${WS_SELF}, do not edit
		[Unit]
		Description=%I Wayland Window Manager
		Documentation=man:systemd.service(7)
		BindsTo=wayland-session@%i.target
		Before=wayland-session@%i.target
		Requires=wayland-session-pre@%i.target
		After=wayland-session-pre@%i.target
		Requires=wayland-wm-env@%i.service
		After=wayland-wm-env@%i.service
		Wants=wayland-session-xdg-autostart@%i.target
		Before=wayland-session-xdg-autostart@%i.target
		# second hand Requires= between targets is not enough to stop this in time
		PropagatesStopTo=xdg-desktop-autostart.target
		[Service]
		# awaits for 'systemd-notify --ready' from WM child
		Type=notify
		NotifyAccess=all
		ExecStart=%I
		Restart=no
		TimeoutStopSec=10
		Slice=${WAYLAND_WM_SLICE}
	EOF
	mkdir -vp "${XDG_RUNTIME_DIR}/systemd/user/app-@autostart.service.d/"
	update_unit "${XDG_RUNTIME_DIR}/systemd/user/app-@autostart.service.d/stop-tweak.conf" <<- EOF
		# injected by ${WS_SELF}, do not edit
		[Unit]
		# make autostart apps stoppable by target
		StopPropagatedFrom=xdg-desktop-autostart.target
	EOF

	# units from plugins
	if type generate_units_${WM_FNAME} >/dev/null
	then
		generate_units_${WM_FNAME}
	fi
	if [ "$UNITS_UPDATED" = "true" ]
	then
		echo Reloading systemd user manager
		systemctl --user daemon-reload
	else
		echo All units are up to date
	fi
	unset UNITS_UPDATED
}

remove_units() {
	# removes units from runtime hierarchy
	local UNIT
	for UNIT in \
	  "${XDG_RUNTIME_DIR}/systemd/user/wayland-wm-env@.service" \
	  "${XDG_RUNTIME_DIR}/systemd/user/wayland-session-pre@.target" \
	  "${XDG_RUNTIME_DIR}/systemd/user/wayland-session@.target" \
	  "${XDG_RUNTIME_DIR}/systemd/user/wayland-session-xdg-autostart@.target" \
	  "${XDG_RUNTIME_DIR}/systemd/user/wayland-wm@.service" \
	  "${XDG_RUNTIME_DIR}/systemd/user/app-@autostart.service.d/stop-tweak.conf" \
	  "${XDG_RUNTIME_DIR}/systemd/user/app-@autostart.service.d/"
	do
		if [ -f "$UNIT" ]
		then
			rm -v "$UNIT"
		elif [ -d "$UNIT" ]
		then
			rmdir -v "$UNIT"
		else
			echo "$(basename "$UNIT") is already gone"
		fi
	done
	if type remove_units_${WM_FNAME} >/dev/null
	then
		remove_units_${WM_FNAME}
	fi
	echo Reloading systemd user manager
	systemctl --user daemon-reload
}

get_vt() {
	# echoes current vt
	if fgconsole
	then
		return 0
	else
		echo "Could not get current VT" >&2
		return 1
	fi
}

get_session_by_vt() {
	# takes VT number, echoes session ID bound to it
	local SESSION
	local VT="$1"
	if [ -n "$VT" ]
	then
		for SESSION in $(loginctl list-sessions --no-legend | sed 's/^[[:space:]]*//; s/[[:space:]].*$//')
		do
			if [ \
			  "$(loginctl show-session ${SESSION} --property Name --value)" = "${USER}" \
			  -a \
			  "$(loginctl show-session ${SESSION} --property VTNr --value)" = "$VT" \
			]
			then
				echo $SESSION
				return 0
			else
				continue
			fi
		done
		echo "Could not find session for VT $VT" >&2
		return 1
	else
		echo "get_session_by_vt requires VT number" >&2
		return 1
	fi
}

load_config_env() {
	#### iterate config dirs in increasing importance and source additional env from relative path in $1
	local __ALL_XDG_CONFIG_DIRS_REV__=''
	local __CONFIG_DIR__=''
	OIFS="$IFS"
	IFS=":"
	for __CONFIG_DIR__ in ${XDG_CONFIG_HOME}:${XDG_CONFIG_DIRS}
	do
		IFS="$OIFS"
		# fill list in reverse order
		if [ -n "${__CONFIG_DIR__}" ]
		then
			__ALL_XDG_CONFIG_DIRS_REV__="${__ALL_XDG_CONFIG_DIRS_REV__}${__ALL_XDG_CONFIG_DIRS_REV__:+:}${__CONFIG_DIR__}"
		fi
	done
	IFS=":"
	for __CONFIG_DIR__ in ${__ALL_XDG_CONFIG_DIRS_REV__}
	do
		IFS="$OIFS"
		if [ -r "${__CONFIG_DIR__}/${1}" ]
		then
			echo "Loading environment from ${__CONFIG_DIR__}/${1}"
			#set -a
			. "${__CONFIG_DIR__}/${1}"
			#set +a
		fi
	done
	IFS="$OIFS"
	return 0
}

load_common_env() {
	load_config_env "wayland-session-env"
}

load_wm_env() {
	load_config_env "${WM}/env"
}

prepare_env() {
	# hopefully smartly prepares the environment and updates systemd user manager
	# has no failure processing yet
	local __ENV_NAMES__=''
	local __SYSTEMD_ENV_NAMES__=''
	local __ENV_NAMES_AFTER__=''
	local __ENV_NAMES_FOR_EXPORT__=''
	local __ENV_NAMES_FOR_UNSET__=''
	local __ENV_NAMES_FOR_CLEANUP__=''
	local __HAS_VARS__=''

	# get current shell env names
	__ENV_NAMES__=$(
		env -0 | cut -z -d '=' -f 1 | sort -z | tr '\0' ' ' | filter_varnames | normalize_varnames_space
	)

	# get systemd user manager env names
	__SYSTEMD_ENV_NAMES__=$(
		systemctl --user show-environment | cut -d '=' -f 1 | normalize_varnames_space
	)

	# take full snapshot of env vars state (zero-delimited)
	# this will be used for comparisons later
	env -0 | sort -z > "${XDG_RUNTIME_DIR}/${WM}_initial_combined_env"

	# collect env names
	__ENV_NAMES__=$(
		env -0 | cut -z -d '=' -f 1 | sort -z | tr '\0' ' ' | filter_varnames | normalize_varnames_space
	)

	# deal with vt and session vars
	if [ -z "${XDG_VTNR}" ]
	then
		XDG_VTNR=$(get_vt) && {
			echo "Guessed XDG_VTNR=$XDG_VTNR"
			export XDG_VTNR
		}
	fi
	if [ -n "${XDG_VTNR}" -a -z "${XDG_SESSION_ID}" ]
	then
		XDG_SESSION_ID=$(get_session_by_vt $XDG_VTNR) && {
			echo "Guessed XDG_SESSION_ID=$XDG_SESSION_ID"
			export XDG_SESSION_ID
		}
	fi

	#### Basic environment
	. /etc/profile
	[ -f "${HOME}/.profile" ] && . "${HOME}/.profile"
	export PATH
	export XDG_CONFIG_DIRS="${XDG_CONFIG_DIRS:-/etc/xdg}"
	export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-${HOME}/.config}"
	export XDG_DATA_DIRS="${XDG_DATA_DIRS:-/usr/local/share:/usr/share}"
	export XDG_DATA_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}"
	export XDG_CACHE_HOME="${XDG_CACHE_HOME:-${HOME}/.cache}"
	export XDG_RUNTIME_DIR="${XDG_RUNTIME_DIR:-/run/user/$(id -u)}"

	export XDG_CURRENT_DESKTOP="${WM}"
	export XDG_SESSION_DESKTOP="${WM}"
	export XDG_MENU_PREFIX="${WM}-"

	#### apply quirks
	if type "quirks_${WM_FNAME}" >/dev/null
	then
		echo "Applying quirks for ${WM}"
		quirks_${WM_FNAME} || return $?
	fi

	load_common_env || return $?

	if type "load_wm_env_${WM_FNAME}" >/dev/null
	then
		echo "WM-specific environment loading"
		load_wm_env_${WM_FNAME} || return $?
	else
		load_wm_env || return $?
	fi

	# hardcode unset conflicting vars.
	# if they were in systemd user manager environment,
	# they will be automatically unset by the algorithm later
	unset DISPLAY WAYLAND_DISPLAY

	# take another zero-delimited snapshot of environment for comparison
	env -0 | sort -z > "${XDG_RUNTIME_DIR}/${WM}_final_env"

	# collect env names
	__ENV_NAMES_AFTER__=$(
		env -0 | cut -z -d '=' -f 1 | sort -z | tr '\0' ' ' | filter_varnames | normalize_varnames_space
	)

	# finalize export vars:
	__ENV_NAMES_FOR_EXPORT__=$(
		{
			# names of vars modified since initial combined environment
			comm -z -13 \
			  "${XDG_RUNTIME_DIR}/${WM}_initial_combined_env" \
			  "${XDG_RUNTIME_DIR}/${WM}_final_env" \
			| cut -z -d '=' -f 1 \
			| tr '\0' '\n' \
			| filter_varnames

			# add defined subset of ${ALWAYS_EXPORT_VARS}
			echo ${ALWAYS_EXPORT_VARS} \
			| normalize_varnames_space \
			| varnames_intersect ${__ENV_NAMES_AFTER__} \
			| normalize_varnames_newline
			# exclude ${NEVER_EXPORT_VARS}
		} | varnames_subtract ${NEVER_EXPORT_VARS} | normalize_varnames_space
	)

	# finalize unset vars:
	# env vars that were in intial combined environment, but were explicitly unset since
	__ENV_NAMES_FOR_UNSET__=$(
		echo ${__ENV_NAMES__} \
		| varnames_subtract ${__ENV_NAMES_AFTER__} \
		| normalize_varnames_space
	)

	# generate list of vars for cleanup after exit
	__ENV_NAMES_FOR_CLEANUP__=$(
		{
			# names of env vars not yet present in systemd user manager, but going to
			echo ${__ENV_NAMES_FOR_EXPORT__} \
			  | varnames_subtract ${__SYSTEMD_ENV_NAMES__}
			# also add ${ALWAYS_CLEANUP_VARS}
			echo ${ALWAYS_CLEANUP_VARS}
			# then subtract ${NEVER_CLEANUP_VARS}
		} | normalize_varnames_space \
		  | varnames_subtract ${NEVER_CLEANUP_VARS} \
		  | normalize_varnames_space
	)

	# cleanup temp files
	rm -f \
	  ${XDG_RUNTIME_DIR}/${WM}_initial_combined_env \
	  ${XDG_RUNTIME_DIR}/${WM}_final_env

	# save cleanup list
	echo ${__ENV_NAMES_FOR_CLEANUP__} \
	  | normalize_varnames_newline \
	  > "${XDG_RUNTIME_DIR}/${WM}_for_cleanup_env_names"

	__HAS_VARS__=false
	echo "Exporting vars to systemd user manager:"
	for VAR in ${__ENV_NAMES_FOR_EXPORT__}
	do
		__HAS_VARS__=true
		echo "  $VAR"
	done

	if [ "${__HAS_VARS__}" = "true" ]
	then
		systemctl --user import-environment ${__ENV_NAMES_FOR_EXPORT__}
		if [ "$?" != "0" ]
		then
			echo "Could not export environment to systemd user session" >&2
			exit 1
		fi
	else
		echo "  No vars"
	fi

	__HAS_VARS__=false
	echo "Unsetting vars from systemd user manager:"
	for VAR in ${__ENV_NAMES_FOR_UNSET__}
	do
		__HAS_VARS__=true
		echo "  $VAR"
	done

	if [ "${__HAS_VARS__}" = "true" ]
	then
		systemctl --user unset-environment ${__ENV_NAMES_FOR_UNSET__}
	else
		echo "  No vars"
	fi

	__HAS_VARS__=false
	echo "Vars to be cleaned up from systemd user manager after exit:"
	for VAR in ${__ENV_NAMES_FOR_CLEANUP__}
	do
		__HAS_VARS__=true
		echo "  $VAR"
	done
	if [ "${__HAS_VARS__}" = "true" ]
	then
		true
	else
		echo "  No vars"
	fi
}

cleanup_vars() {
	# take var names from "${XDG_RUNTIME_DIR}/${WM}_for_cleanup_env_names"
	# and ${ALWAYS_CLEANUP_VARS}
	# exclude ${NEVER_CLEANUP_VARS}
	# and remove them from systemd user manager
	local CLEANUP_RC=''
	local __VAR__=''
	local __HAS_VARS__=''
	local __ENV_NAMES_FOR_CLEANUP__=$(
		{
			# saved cleanup list if exists
			[ -f "${XDG_RUNTIME_DIR}/${WM}_for_cleanup_env_names" ] \
			  && cat "${XDG_RUNTIME_DIR}/${WM}_for_cleanup_env_names"
			# vars to always cleanup
			echo ${ALWAYS_CLEANUP_VARS}
			# subtract vars to never cleanup
		} | varnames_subtract ${NEVER_CLEANUP_VARS} | normalize_varnames_space
	)
	echo "Cleaning up variables:"
	__HAS_VARS__=false
	for __VAR__ in ${__ENV_NAMES_FOR_CLEANUP__}
	do
		__HAS_VARS__=true
		echo "  ${__VAR__}"
	done
	if [ "${__HAS_VARS__}" = "true" ]
	then
		systemctl --user unset-environment ${__ENV_NAMES_FOR_CLEANUP__}
		CLEANUP_RC=$?
	else
		echo "  No vars"
		CLEANUP_RC=0
	fi
	[ -f "${XDG_RUNTIME_DIR}/${WM}_for_cleanup_env_names" ] \
	  && rm "${XDG_RUNTIME_DIR}/${WM}_for_cleanup_env_names"
	return $CLEANUP_RC
}

#### More mode decisions

if [ "$MODE" = "cleanup-env" ]
then
	cleanup_vars
	CLEANUP_RC=$?
	return $CLEANUP_RC 2>/dev/null || exit $CLEANUP_RC

elif [ "$MODE" = "unitgen" ]
then
	generate_units
	GU_RC=$?
	return $GU_RC 2>/dev/null || exit $GU_RC

elif [ "$MODE" = "unitrm" ]
then
	if systemctl --user is-active -q 'wayland-wm@*.service'
	then
		echo 'wayland-wm@*.service is still active, will not remove units' >&2
		return 1 2>/dev/null || exit 1
	else
		remove_units
		RU_RC=$?
		return $RU_RC 2>/dev/null || exit $RU_RC
	fi

elif [ "$MODE" = "prepare-env" ]
then
	# for use by wayland-wm-env@.service
	# this mode prepares environment, exports it to systemd user manager
	# no failure processing yet
	prepare_env

elif [ "$MODE" = "sd-start" ]
then
	# all in one go systemd start, supports sourcing from login shell
	# start if no WM is running and if system is at graphical.target
	if systemctl --user is-active -q 'wayland-wm@*.service'
	then
		echo "wayland-wm@*.service is already running"
		# we can be sourced
		return 0 2>/dev/null || exit 0
	elif systemctl --user is-active -q wayland-wm-*.scope
	then
		echo "wayland-wm-*.scope is already running, do not mix shell and systemd start"
		# we can be sourced
		return 1 2>/dev/null || exit 1
	elif ! systemctl is-active -q graphical.target
	then
		echo "System is not at graphical.target"
		return 0 2>/dev/null || exit 0
	else
		generate_units
		# makeshift reverse of --wait to bind ccompositor's life to session
		trap "systemctl --user stop wayland-wm@${WM}.service" EXIT INT TERM
		systemctl --user start --wait wayland-wm@${WM}.service
		exit
	fi

elif [ "$MODE" = "sd-stop" ]
then
	if systemctl --user is-active -q wayland-wm@${WM}.service
	then
		systemctl --user stop wayland-wm@${WM}.service
	else
		echo "wayland-wm@${WM}.service is not running"
		# we can be sourced
		return 0 2>/dev/null || exit 0
	fi
fi
